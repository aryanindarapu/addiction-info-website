[{"D:\\addiction-info-website\\src\\index.js":"1","D:\\addiction-info-website\\src\\components\\MapFunc.js":"2","D:\\addiction-info-website\\src\\components\\Navbar\\Navbar.js":"3","D:\\addiction-info-website\\src\\App.js":"4","D:\\addiction-info-website\\src\\components\\Navbar\\Dropdown.js":"5","D:\\addiction-info-website\\src\\components\\MapList.js":"6","D:\\addiction-info-website\\src\\components\\FormattedCard.js":"7","D:\\addiction-info-website\\src\\components\\Pages\\Info.js":"8","D:\\addiction-info-website\\src\\components\\Pages\\Home.js":"9","D:\\addiction-info-website\\src\\components\\Pages\\About.js":"10","D:\\addiction-info-website\\src\\serviceWorker.js":"11","D:\\addiction-info-website\\src\\components\\Navbar\\MenuItems.js":"12","D:\\addiction-info-website\\src\\styles\\mapStyles.js":"13"},{"size":503,"mtime":1610292569812,"results":"14","hashOfConfig":"15"},{"size":6329,"mtime":1610944268197,"results":"16","hashOfConfig":"15"},{"size":2222,"mtime":1609559830436,"results":"17","hashOfConfig":"15"},{"size":1366,"mtime":1611005652795,"results":"18","hashOfConfig":"15"},{"size":824,"mtime":1609076151787,"results":"19","hashOfConfig":"15"},{"size":520,"mtime":1609594398690,"results":"20","hashOfConfig":"15"},{"size":607,"mtime":1610066070798,"results":"21","hashOfConfig":"15"},{"size":986,"mtime":1609171220749,"results":"22","hashOfConfig":"15"},{"size":783,"mtime":1610297709371,"results":"23","hashOfConfig":"15"},{"size":1275,"mtime":1609171221410,"results":"24","hashOfConfig":"15"},{"size":5086,"mtime":1606808393994,"results":"25","hashOfConfig":"15"},{"size":385,"mtime":1609077197731,"results":"26","hashOfConfig":"15"},{"size":3563,"mtime":1609642592207,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1yqz897",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\addiction-info-website\\src\\index.js",[],["61","62"],"D:\\addiction-info-website\\src\\components\\MapFunc.js",["63","64"],"import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport { MdGpsFixed, MdGpsNotFixed } from 'react-icons/md'; \r\n\r\nimport { mapContainerStyle, options } from '../styles/mapStyles';\r\nimport '../index.css';\r\n\r\n// To access places libarary with Google Maps API\r\nconst libraries = [\"places\"]\r\n\r\nfunction MapFunc({ callbackFromHome, data }) {\r\n  const [initLocation, setInitLocation] = useState({lat: 0, long: 0})\r\n  const [treatmentLocs, updateTreatmentLocs] = useState(null)\r\n  const [selectedTreatmentLoc, setSelectedTreatmentLoc] = useState(null)\r\n  const [selectedTreatmentLocDetails, setSelectedTreatmentLocDetails] = useState(null)\r\n  const [onCenter, setOnCenter] = useState(true)\r\n  const [clickedIcon, setClickedIcon] = useState(null)\r\n\r\n  // Creates a Map Reference to only load once\r\n  const mapRef = React.useRef()\r\n  \r\n  const onMapLoad = React.useCallback((map) => {\r\n    setOnCenter(true)\r\n    mapRef.current = map\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // Get initial location of browser\r\n    navigator?.geolocation.getCurrentPosition(({coords: {latitude: lat, longitude: lng}}) => {\r\n      const pos = {lat, lng}\r\n      setInitLocation(pos)\r\n    })\r\n\r\n    const listener = e => {\r\n      if (e.key === \"Escape\") setSelectedTreatmentLoc(null)\r\n    }\r\n  \r\n    window.addEventListener(\"keydown\", listener)\r\n    \r\n    return () => {\r\n      window.removeEventListener(\"keydown\", listener)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if(treatmentLocs === null) console.log(\"placesList is null\")\r\n    else getPlacesDetails(treatmentLocs)\r\n  }, [treatmentLocs])\r\n\r\n  useEffect(() => {\r\n    if (data.length === 0) console.log(\"No clicked location yet.\")\r\n    else {\r\n      setClickedIcon(data)\r\n      panToLoc(data.geometry.location)\r\n    }\r\n  }, [data])\r\n\r\n  // Called when searching for treatment centers in radius\r\n  const fetchPlaces = () => {\r\n    const google = window.google\r\n    const service = new google.maps.places.PlacesService(mapRef.current)\r\n\r\n    const request = {\r\n      location: mapRef.current.getCenter(),\r\n      radius: 500,\r\n      query: 'addiction treatment centers'\r\n    }\r\n\r\n    service.textSearch(request, (results, status) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        // Sets the list of places\r\n        updateTreatmentLocs(results)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Gets detailed places for MapList\r\n  const getPlacesDetails = async placesArr => {\r\n    const google = window.google\r\n    const service = new google.maps.places.PlacesService(mapRef.current)\r\n\r\n    let detailedPlacesArr = await Promise.all(\r\n      placesArr.map(currentPlace => {\r\n        return new Promise((resolve) => \r\n          service.getDetails({\r\n            placeId: currentPlace.place_id\r\n          }, (place, status) => {\r\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n              return resolve(place)\r\n            }\r\n            return resolve(null)\r\n        }))\r\n      })\r\n    )\r\n\r\n    callbackFromHome(detailedPlacesArr)\r\n  }\r\n\r\n  // Called when clicking on Marker\r\n  const openInfoWindow = (selectedPlace) => {\r\n    panToLoc(selectedPlace.geometry.location, false)\r\n    const google = window.google\r\n    const service = new google.maps.places.PlacesService(mapRef.current)\r\n\r\n    setSelectedTreatmentLoc(selectedPlace)\r\n\r\n    service.getDetails({\r\n      placeId: selectedPlace.place_id\r\n    }, (place, status) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        setSelectedTreatmentLocDetails(place)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Pans to location and changes gps icon to solid\r\n  const panToLoc = (loc, center) => {\r\n    mapRef.current.panTo(loc)\r\n\r\n    // Checks if it is center\r\n    if (center) {\r\n      setSelectedTreatmentLoc(null)\r\n      setClickedIcon(null)\r\n      mapRef.current.setZoom(13)\r\n      setOnCenter(center)\r\n    }\r\n  }\r\n\r\n  const {isLoaded, loadError} = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries: libraries\r\n  })\r\n\r\n  if (loadError) return \"Error Loading Maps\"\r\n  if (!isLoaded) return \"Loading Map...\" // TODO Implement loading screen\r\n\r\n  return (\r\n    <div>\r\n      <a onClick={() => panToLoc(initLocation, true)} style={{cursor: 'pointer'}}>\r\n        {onCenter ? <MdGpsFixed className=\"gpsicon\"  /> : <MdGpsNotFixed className=\"gpsicon\" />}\r\n      </a>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        zoom={13}\r\n        center={initLocation}\r\n        options={options}\r\n        onLoad={onMapLoad}\r\n        onTilesLoaded={fetchPlaces}\r\n        onCenterChanged={() => setOnCenter(false)}\r\n      >\r\n        {treatmentLocs && treatmentLocs.map((place, i) => {\r\n          return (\r\n            <Marker \r\n              key={i}\r\n              position={place.geometry.location}\r\n              onClick={() => openInfoWindow(place)}\r\n              icon={{\r\n                url: 'https://www.pinclipart.com/picdir/big/17-171343_maps-clipart-map-pin-google-maps-marker-blue.png',\r\n                scaledSize: new window.google.maps.Size(619 * 0.038, 999 * 0.038)\r\n              }}\r\n            />\r\n          )\r\n        })}\r\n        \r\n        {clickedIcon && \r\n          <Marker\r\n            position={clickedIcon.geometry.location}\r\n            onClick={() => openInfoWindow(clickedIcon)}\r\n          />\r\n        }\r\n\r\n        {// TODO Pan to nearest location\r\n        selectedTreatmentLoc && selectedTreatmentLocDetails && (\r\n          <InfoWindow            \r\n            position={selectedTreatmentLoc.geometry.location}\r\n\r\n            onCloseClick={() => {\r\n              setSelectedTreatmentLoc(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h3>{selectedTreatmentLoc.name}</h3>\r\n              <h5>{selectedTreatmentLocDetails.vicinity}</h5>\r\n              {\r\n                // TODO automatically call by clicking phone # and address\r\n              }\r\n              <h5>{selectedTreatmentLocDetails.formatted_phone_number}</h5>\r\n              {\r\n                // TODO add stars instead of number \r\n              }\r\n              <p>Google Rating: {selectedTreatmentLocDetails.rating}/5</p> \r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </GoogleMap>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapFunc;\r\n\r\n","D:\\addiction-info-website\\src\\components\\Navbar\\Navbar.js",["65","66","67","68"],"import React, { useState } from 'react';\r\n// import { Button } from './Button';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\nimport Dropdown from './Dropdown';\r\nimport { FaBars, FaTimes } from 'react-icons/fa';\r\n\r\nfunction Navbar() {\r\n  const [click, setClick] = useState(false);\r\n  const [dropdown, setDropdown] = useState(false);\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const onMouseEnter = () => {\r\n    if (window.innerWidth < 960) {\r\n      setDropdown(false);\r\n    } else {\r\n      setDropdown(true);\r\n    }\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    if (window.innerWidth < 960) {\r\n      setDropdown(false);\r\n    } else {\r\n      setDropdown(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav className='navbar'>\r\n        <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\r\n          Placeholder\r\n          {/* <i class='fab fa-firstdraft' /> */}\r\n        </Link>\r\n        <div className='menu-icon' onClick={handleClick}>\r\n          {click ? \r\n            <FaTimes /> :\r\n            <FaBars />\r\n          }\r\n        </div>\r\n        <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n          <li className='nav-item'>\r\n            <Link \r\n              to='/' \r\n              className='nav-links' \r\n              onClick={closeMobileMenu}\r\n            >\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <Link\r\n              to='/about'\r\n              className='nav-links'\r\n              onClick={closeMobileMenu}\r\n            >\r\n              About\r\n            </Link>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <Link\r\n              to='/info'\r\n              className='nav-links'\r\n              onClick={closeMobileMenu}\r\n            >\r\n              More Info\r\n            </Link>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <Link\r\n              to='/stories'\r\n              className='nav-links'\r\n              onClick={closeMobileMenu}\r\n            >\r\n              Personal Stories\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;",["69","70"],"D:\\addiction-info-website\\src\\App.js",[],"D:\\addiction-info-website\\src\\components\\Navbar\\Dropdown.js",[],"D:\\addiction-info-website\\src\\components\\MapList.js",["71"],"import React from 'react';\r\n\r\nimport { FormattedCard } from './FormattedCard';\r\n\r\n\r\nimport '../index.css';\r\n\r\nfunction MapList({ callbackFromHome, data }) {\r\n  // TODO Implement list loading screen\r\n  if (data === []) return console.log(\"one sec\")\r\n\r\n  return (\r\n    <div className=\"scroll\">\r\n      {\r\n        data.map((place) => {\r\n          if (place !== null)\r\n            return (<FormattedCard place={place} callbackFromHome={callbackFromHome} />)\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapList;","D:\\addiction-info-website\\src\\components\\FormattedCard.js",[],"D:\\addiction-info-website\\src\\components\\Pages\\Info.js",[],"D:\\addiction-info-website\\src\\components\\Pages\\Home.js",[],["72","73"],"D:\\addiction-info-website\\src\\components\\Pages\\About.js",[],"D:\\addiction-info-website\\src\\serviceWorker.js",[],["74","75"],"D:\\addiction-info-website\\src\\components\\Navbar\\MenuItems.js",[],"D:\\addiction-info-website\\src\\styles\\mapStyles.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":48,"column":6,"nodeType":"82","endLine":48,"endColumn":21,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":139,"column":7,"nodeType":"86","endLine":139,"endColumn":83},{"ruleId":"87","severity":1,"message":"88","line":5,"column":8,"nodeType":"89","messageId":"90","endLine":5,"endColumn":16},{"ruleId":"87","severity":1,"message":"91","line":10,"column":10,"nodeType":"89","messageId":"90","endLine":10,"endColumn":18},{"ruleId":"87","severity":1,"message":"92","line":15,"column":9,"nodeType":"89","messageId":"90","endLine":15,"endColumn":21},{"ruleId":"87","severity":1,"message":"93","line":23,"column":9,"nodeType":"89","messageId":"90","endLine":23,"endColumn":21},{"ruleId":"76","replacedBy":"94"},{"ruleId":"78","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":15,"column":26,"nodeType":"98","messageId":"99","endLine":15,"endColumn":28},{"ruleId":"76","replacedBy":"100"},{"ruleId":"78","replacedBy":"101"},{"ruleId":"76","replacedBy":"102"},{"ruleId":"78","replacedBy":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPlacesDetails'. Either include it or remove the dependency array.","ArrayExpression",["106"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'dropdown' is assigned a value but never used.","'onMouseEnter' is assigned a value but never used.","'onMouseLeave' is assigned a value but never used.",["104"],["105"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["104"],["105"],["104"],["105"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [getPlacesDetails, treatmentLocs]",{"range":"109","text":"110"},[1639,1654],"[getPlacesDetails, treatmentLocs]"]