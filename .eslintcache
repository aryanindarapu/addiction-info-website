[{"D:\\addiction-info-website\\src\\App.js":"1","D:\\addiction-info-website\\src\\components\\MapFunc.js":"2","D:\\addiction-info-website\\src\\index.js":"3","D:\\addiction-info-website\\src\\components\\info.js":"4","D:\\addiction-info-website\\src\\serviceWorker.js":"5","D:\\addiction-info-website\\src\\styles\\mapStyles.js":"6","D:\\addiction-info-website\\src\\components\\MapList.js":"7","D:\\addiction-info-website\\src\\components\\Home.js":"8","D:\\addiction-info-website\\src\\components\\Info.js":"9","D:\\addiction-info-website\\src\\components\\Navbar\\Navbar.js":"10","D:\\addiction-info-website\\src\\components\\About.js":"11","D:\\addiction-info-website\\src\\components\\Navbar\\MenuItems.js":"12"},{"size":677,"mtime":1609080655281,"results":"13","hashOfConfig":"14"},{"size":4647,"mtime":1609018695609,"results":"15","hashOfConfig":"14"},{"size":503,"mtime":1609040615559,"results":"16","hashOfConfig":"14"},{"size":986,"mtime":1606931712482,"results":"17","hashOfConfig":"14"},{"size":5086,"mtime":1606808393994,"results":"18","hashOfConfig":"14"},{"size":3406,"mtime":1609017977586,"results":"19","hashOfConfig":"14"},{"size":250,"mtime":1609024385619,"results":"20","hashOfConfig":"14"},{"size":367,"mtime":1609042285828,"results":"21","hashOfConfig":"14"},{"size":986,"mtime":1609072881087,"results":"22","hashOfConfig":"14"},{"size":2226,"mtime":1609079908397,"results":"23","hashOfConfig":"14"},{"size":1275,"mtime":1609072875384,"results":"24","hashOfConfig":"14"},{"size":385,"mtime":1609077197731,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yqz897",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\addiction-info-website\\src\\App.js",[],"D:\\addiction-info-website\\src\\components\\MapFunc.js",["53","54"],"import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport { MdGpsFixed, MdGpsNotFixed } from 'react-icons/md'; \r\n\r\nimport { mapContainerStyle, options } from '../styles/mapStyles';\r\nimport '../index.css';\r\n\r\n// To access places libarary with Google Maps API\r\nconst libraries = [\"places\"]\r\n\r\nfunction MapFunc() {\r\n  const [initLocation, setInitLocation] = useState({lat: 0, long: 0})\r\n  const [treatmentLocs, updateTreatmentLocs] = useState([])\r\n  const [selectedTreatmentLoc, setSelectedTreatmentLoc] = useState(null)\r\n  const [selectedTreatmentLocDetails, setSelectedTreatmentLocDetails] = useState(null)\r\n  const [onCenter, setOnCenter] = useState(true)\r\n\r\n  // Creates a Map Reference to only load once\r\n  const mapRef = React.useRef()\r\n  \r\n  const onMapLoad = React.useCallback((map) => {\r\n    setOnCenter(true)\r\n    mapRef.current = map\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // Get initial location of browser\r\n    navigator?.geolocation.getCurrentPosition(({coords: {latitude: lat, longitude: lng}}) => {\r\n      const pos = {lat, lng}\r\n      setInitLocation(pos)\r\n    })\r\n\r\n    const listener = e => {\r\n      if (e.key === \"Escape\") selectedTreatmentLoc(null)\r\n    }\r\n  \r\n    window.addEventListener(\"keydown\", listener)\r\n    \r\n    return () => {\r\n      window.removeEventListener(\"keydown\", listener)\r\n    }\r\n  }, [])\r\n\r\n  // Called when searching for treatment centers in radius\r\n  const fetchPlaces = () => {\r\n    const google = window.google\r\n    const service = new google.maps.places.PlacesService(mapRef.current)\r\n\r\n    const request = {\r\n      location: mapRef.current.getCenter(),\r\n      radius: 500,\r\n      query: 'addiction treatment centers'\r\n    }\r\n\r\n    service.textSearch(request, (results, status) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        updateTreatmentLocs(results);\r\n      }\r\n    })\r\n  }\r\n\r\n  // Called when clicking on Marker\r\n  const openInfoWindow = (selectedPlace) => {\r\n    panToLoc(selectedPlace.geometry.location)\r\n    const google = window.google\r\n    const service = new google.maps.places.PlacesService(mapRef.current)\r\n\r\n    setSelectedTreatmentLoc(selectedPlace, false)\r\n\r\n    service.getDetails({\r\n      placeId: selectedPlace.place_id\r\n    }, (place, status) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        setSelectedTreatmentLocDetails(place)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Pans to initial location and changes icon to solid\r\n  const panToLoc = (loc, center) => {\r\n    mapRef.current.panTo(loc)\r\n    if (center) {\r\n      mapRef.current.setZoom(13)\r\n      setOnCenter(center)\r\n    }\r\n  }\r\n\r\n  const {isLoaded, loadError} = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries: libraries\r\n  })\r\n\r\n  if (loadError) return \"Error Loading Maps\"\r\n  if (!isLoaded) return \"Loading Map...\" // TODO Implement loading screen\r\n\r\n  // TODO add Google Map ordered list\r\n  return (\r\n    <div style={{position: 'relative'}}>\r\n      <a onClick={() => panToLoc(initLocation, true)}>\r\n        {onCenter ? <MdGpsFixed className=\"gpsicon\"  /> : <MdGpsNotFixed className=\"gpsicon\" />}\r\n      </a>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        zoom={13}\r\n        center={initLocation}\r\n        options={options}\r\n        onLoad={onMapLoad}\r\n        onTilesLoaded={fetchPlaces}\r\n        onCenterChanged={() => setOnCenter(false)}\r\n      >\r\n        {treatmentLocs && treatmentLocs.map((place, i) =>\r\n          <Marker \r\n            key={i}\r\n            position={place.geometry.location}\r\n            onClick={() => openInfoWindow(place)}\r\n          />\r\n        )}\r\n        {// TODO Pan to nearest location\r\n        selectedTreatmentLoc && selectedTreatmentLocDetails && (\r\n          <InfoWindow            \r\n            position={selectedTreatmentLoc.geometry.location}\r\n\r\n            onCloseClick={() => {\r\n              setSelectedTreatmentLoc(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h3>{selectedTreatmentLoc.name}</h3>\r\n              <h5>{selectedTreatmentLocDetails.vicinity}</h5>\r\n              {\r\n                // TODO automatically call by clicking phone # and address\r\n              }\r\n              <h5>{selectedTreatmentLocDetails.formatted_phone_number}</h5>\r\n              {\r\n                // TODO add stars instead of number \r\n              }\r\n              <p>Google Rating: {selectedTreatmentLocDetails.rating}/5</p> \r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </GoogleMap>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapFunc;\r\n\r\n",["55","56"],"D:\\addiction-info-website\\src\\index.js",[],"D:\\addiction-info-website\\src\\components\\info.js",[],"D:\\addiction-info-website\\src\\serviceWorker.js",[],"D:\\addiction-info-website\\src\\styles\\mapStyles.js",[],"D:\\addiction-info-website\\src\\components\\MapList.js",[],"D:\\addiction-info-website\\src\\components\\Home.js",[],"D:\\addiction-info-website\\src\\components\\Info.js",[],"D:\\addiction-info-website\\src\\components\\Navbar\\Navbar.js",["57","58","59","60"],"import React, { useState } from 'react';\r\n// import { Button } from './Button';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\nimport Dropdown from './Dropdown';\r\nimport { FaBars, FaTimes } from 'react-icons/fa';\r\n\r\nfunction Navbar() {\r\n  const [click, setClick] = useState(false);\r\n  const [dropdown, setDropdown] = useState(false);\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const onMouseEnter = () => {\r\n    if (window.innerWidth < 960) {\r\n      setDropdown(false);\r\n    } else {\r\n      setDropdown(true);\r\n    }\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    if (window.innerWidth < 960) {\r\n      setDropdown(false);\r\n    } else {\r\n      setDropdown(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav className='navbar'>\r\n        <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\r\n          Placeholder\r\n          {/* <i class='fab fa-firstdraft' /> */}\r\n        </Link>\r\n        <div className='menu-icon' onClick={handleClick}>\r\n          {click ? \r\n            <FaTimes /> :\r\n            <FaBars />\r\n          }\r\n        </div>\r\n        <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n          <li className='nav-item'>\r\n            <Link \r\n              to='/home' \r\n              className='nav-links' \r\n              onClick={closeMobileMenu}\r\n            >\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <Link\r\n              to='/about'\r\n              className='nav-links'\r\n              onClick={closeMobileMenu}\r\n            >\r\n              About\r\n            </Link>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <Link\r\n              to='/info'\r\n              className='nav-links'\r\n              onClick={closeMobileMenu}\r\n            >\r\n              More Info\r\n            </Link>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <Link\r\n              to='/stories'\r\n              className='nav-links'\r\n              onClick={closeMobileMenu}\r\n            >\r\n              Personal Stories\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;","D:\\addiction-info-website\\src\\components\\About.js",[],"D:\\addiction-info-website\\src\\components\\Navbar\\MenuItems.js",[],{"ruleId":"61","severity":1,"message":"62","line":42,"column":6,"nodeType":"63","endLine":42,"endColumn":8,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":99,"column":7,"nodeType":"67","endLine":99,"endColumn":55},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":10,"column":10,"nodeType":"74","messageId":"75","endLine":10,"endColumn":18},{"ruleId":"72","severity":1,"message":"77","line":15,"column":9,"nodeType":"74","messageId":"75","endLine":15,"endColumn":21},{"ruleId":"72","severity":1,"message":"78","line":23,"column":9,"nodeType":"74","messageId":"75","endLine":23,"endColumn":21},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedTreatmentLoc'. Either include it or remove the dependency array.","ArrayExpression",["79"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'dropdown' is assigned a value but never used.","'onMouseEnter' is assigned a value but never used.","'onMouseLeave' is assigned a value but never used.",{"desc":"82","fix":"83"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [selectedTreatmentLoc]",{"range":"84","text":"85"},[1411,1413],"[selectedTreatmentLoc]"]